"""
Exercício com abstração, herança, encapsulamento e polimorfismo
Cria um sistema bancário (extremamente simples) que tem clientes, contas e 
um banco. A ideia é que o cliente tenha uma conta(poupança ou corrente) e que possa sacar/depoisistar
nessa conta. Contas corrente tem um limite extra. Banco tem clientes e contas.

Dicas:
Criar classe cliente que herda da classe Pessoa (Herança)
    Pessoa tem nome e idade(com getters)
    Clientes TEM conta (agregação da classe ContaCorrente ou ContaPoupança)
Criar classes ContaPoupança e ContaCorre que herdam de Conta
    ContaCorrente deve ter um limite extra
    Contas têm agência, número da conta e saldo
    Contas devem ter método para depósito
    Conta (super classe) deve ter o método sacar abstrato (abstração e 
    polimorfismo - as subclasses que implementam o método sacar)
Criar Classe Banco para AGREGAR classes de clientes e de contas (Agregação)
Banco será responsável autenticar o cliente e as contas da seguinte maneira:
    Banco tem contas e clientes (Agregação)
    * Checar se a agência é daquele banco
    * Checar se o cliente é daquele banco
    * Checar se a conta é daquele Banco
Só será possível sacar se passa na autenticação do banco (descrita acima)
"""
from abc import ABC, abstractmethod

class Pessoa:
    def __init__(self, nome, idade):
        self._nome = nome
        self._idade = idade

    @property
    def nome(self):
        return self._nome
    
    @property
    def idade(self):
        return self._idade
    
class Cliente(Pessoa):
    def __init__(self, nome, idade):
        super().__init__(nome,idade)
        self.conta = None

    def inserir_conta(self, conta):
        self.conta = conta

class Conta(ABC):
    def __init__(self, agencia, n_conta, saldo):
        self.agencia = agencia
        self.n_conta = n_conta
        self.saldo = saldo

    def depositar(self, valor):
        self.saldo += valor
        self.detalhes()
    
    def detalhes(self):
        print(f'Agência: {self.agencia} '
              f'Conta: {self.n_conta} '
              f'Saldo: {self.saldo}')

    @abstractmethod
    def sacar(self, valor):
        pass

class CC(Conta):
    def __init__(self, agencia, conta, saldo, limite= 200):
        super().__init__(agencia,conta,saldo)
        self.limite = limite
    
    def sacar(self, valor):
        if (self.saldo + self.limite) < valor:
            print('Saldo Insuficiente.')
            return

        self.saldo -= valor
        self.detalhes()
class CP(Conta):
    def sacar(self, valor):
        if self.saldo  < valor:
            print('Saldo Insuficiente.')
            return
        self.saldo -= valor
        self.detalhes()

class Banco:
    def __init__(self):
        self.agencias = [1111, 2222, 3333]
        self.clientes = []
        self.contas = []

    def inserir_cliente(self, cliente):
        self.clientes.append(cliente)
    def inserir_conta(self, conta):
        self.contas.append(conta)

    def autenticar(self, cliente):
        if cliente not in self.clientes:
            return False

        if cliente.conta not in self.contas:
            return False

        if cliente.conta.agencia not in self.agencias:
            return False
        return True

